<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoiseEngine.Mathematics</name>
    </assembly>
    <members>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.FromRadians(System.Single)">
            <summary>
            Creates new <see cref="T:NoiseEngine.Mathematics.AngleFloat"/> with value corresponding to radians parameter.
            </summary>
            <param name="radians">Angle value in radians.</param>
            <returns><see cref="T:NoiseEngine.Mathematics.AngleFloat"/> with value corresponding to radians parameter.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.FromDegrees(System.Single)">
            <summary>
            Creates new <see cref="T:NoiseEngine.Mathematics.AngleFloat"/> with value corresponding to degrees parameter.
            </summary>
            <param name="degrees">Angle value in degrees.</param>
            <returns><see cref="T:NoiseEngine.Mathematics.AngleFloat"/> with value corresponding to degrees parameter.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.Equals(NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed int that is the hash code for this instance.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.AngleFloat"/> to string.
            </summary>
            <returns>String representation of this <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Addition(NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Adds two angles.
            </summary>
            <param name="a">First angle.</param>
            <param name="b">Second angle.</param>
            <returns>Sum of a and b angles.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Subtraction(NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Subtracts two angles.
            </summary>
            <param name="a">First angle.</param>
            <param name="b">Second angle.</param>
            <returns>Difference of a and b angles.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Multiply(NoiseEngine.Mathematics.AngleFloat,System.Single)">
            <summary>
            Multiplies angle by <see cref="T:System.Single"/> value.
            </summary>
            <param name="angle">Angle.</param>
            <param name="f"><see cref="T:System.Single"/> value.</param>
            <returns>Product of angle by f multiplication.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Division(NoiseEngine.Mathematics.AngleFloat,System.Single)">
            <summary>
            Divides angle by <see cref="T:System.Single"/> value.
            </summary>
            <param name="angle">Angle.</param>
            <param name="f"><see cref="T:System.Single"/> value.</param>
            <returns>Product of angle by f division.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Equality(NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>s are equal.
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>.</param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>.</param>
            <returns>True if left is equal to right; otherwise false.</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.AngleFloat.op_Inequality(NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>s are not equal.
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>.</param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.AngleFloat"/>.</param>
            <returns>True if left is not equal to right; otherwise false.</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double1.Left">
            <summary>
            Shorthand for writing -1.0.
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double1.Right">
            <summary>
            Shorthand for writing 1.0.
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double1.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double1.Distance(System.Double,System.Double)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double1.SquaredDistance(System.Double,System.Double)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double1.Similar(System.Double,System.Double)">
            <summary>
            Checks if a and b are similar enough to be considered as equal 
            </summary>
            <param name="a">First value></param>
            <param name="b">Second value></param>
            <returns><see langword="true"/> if a and b can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.Zero">
            <summary>
            Shorthand for writing Double2(0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.One">
            <summary>
            Shorthand for writing Double2(1.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.PositiveInfinity">
            <summary>
            Shorthand for writing Double2(double.PositiveInfinity, double.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.NegativeInfinity">
            <summary>
            Shorthand for writing Double2(double.NegativeInfinity, double.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.Left">
            <summary>
            Shorthand for writing Double2(-1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.Right">
            <summary>
            Shorthand for writing Double2(1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.Up">
            <summary>
            Shorthand for writing Double2(0.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double2.Down">
            <summary>
            Shorthand for writing Double2(0.0, -1.0).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Equals(NoiseEngine.Mathematics.Double2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Similar(NoiseEngine.Mathematics.Double2)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Double2"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Double2"/> to compare <see cref="T:NoiseEngine.Mathematics.Double2"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Double2"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Dot(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Double2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Scale(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Lerp(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.Distance(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.SquaredDistance(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Double2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Addition(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Double2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Subtraction(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Double2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Multiply(NoiseEngine.Mathematics.Double2,System.Double)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Division(NoiseEngine.Mathematics.Double2,System.Double)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Double2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Equality(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Inequality(NoiseEngine.Mathematics.Double2,NoiseEngine.Mathematics.Double2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.Double"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Implicit(System.Double)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:System.Double"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="d"><see cref="T:System.Double"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Implicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Implicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.Int32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.Single"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.Int64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.UInt32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:System.UInt64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double2.op_Explicit(NoiseEngine.Mathematics.Double2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Zero">
            <summary>
            Shorthand for writing Double3(0.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.One">
            <summary>
            Shorthand for writing Double3(1.0, 1.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.PositiveInfinity">
            <summary>
            Shorthand for writing Double3(double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.NegativeInfinity">
            <summary>
            Shorthand for writing Double3(double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Left">
            <summary>
            Shorthand for writing Double3(-1.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Right">
            <summary>
            Shorthand for writing Double3(1.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Up">
            <summary>
            Shorthand for writing Double3(0.0, 1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Down">
            <summary>
            Shorthand for writing Double3(0.0, -1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Front">
            <summary>
            Shorthand for writing Double3(0.0, 0.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double3.Back">
            <summary>
            Shorthand for writing Double3(0.0, 0.0, -1.0).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Equals(NoiseEngine.Mathematics.Double3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Similar(NoiseEngine.Mathematics.Double3)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Double3"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Double3"/> to compare <see cref="T:NoiseEngine.Mathematics.Double3"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Double3"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Dot(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Double3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Scale(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Lerp(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.Distance(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.SquaredDistance(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Double3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Addition(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Double3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Subtraction(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Double3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Multiply(NoiseEngine.Mathematics.Double3,System.Double)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Division(NoiseEngine.Mathematics.Double3,System.Double)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Double3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Equality(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Inequality(NoiseEngine.Mathematics.Double3,NoiseEngine.Mathematics.Double3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Implicit(System.Double)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:System.Double"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="d"><see cref="T:System.Double"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Implicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.Double"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.Int32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.Single"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.Int64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.UInt32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:System.UInt64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double3.op_Explicit(NoiseEngine.Mathematics.Double3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z component equals 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Zero">
            <summary>
            Shorthand for writing Double4(0.0, 0.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.One">
            <summary>
            Shorthand for writing Double4(1.0, 1.0, 1.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.PositiveInfinity">
            <summary>
            Shorthand for writing Double4(double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.NegativeInfinity">
            <summary>
            Shorthand for writing Double4(double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Left">
            <summary>
            Shorthand for writing Double4(-1.0, 0.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Right">
            <summary>
            Shorthand for writing Double4(1.0, 0.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Up">
            <summary>
            Shorthand for writing Double4(0.0, 1.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Down">
            <summary>
            Shorthand for writing Double4(0.0, -1.0, 0.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Front">
            <summary>
            Shorthand for writing Double4(0.0, 0.0, 1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Back">
            <summary>
            Shorthand for writing Double4(0.0, 0.0, -1.0, 0.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Ana">
            <summary>
            Shorthand for writing Double4(0.0, 0.0, 0.0, 1.0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Double4.Kata">
            <summary>
            Shorthand for writing Double4(0.0, 0.0, 0.0, -1.0).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Equals(NoiseEngine.Mathematics.Double4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Similar(NoiseEngine.Mathematics.Double4)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Double4"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Double4"/> to compare <see cref="T:NoiseEngine.Mathematics.Double4"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Double4"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Dot(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Double4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Scale(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Lerp(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.Distance(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.SquaredDistance(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Double4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Addition(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Double4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Subtraction(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Double4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Multiply(NoiseEngine.Mathematics.Double4,System.Double)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Double4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Division(NoiseEngine.Mathematics.Double4,System.Double)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Double4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="b"><see cref="T:System.Double"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Equality(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Inequality(NoiseEngine.Mathematics.Double4,NoiseEngine.Mathematics.Double4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Double4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Implicit(System.Double)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:System.Double"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="d"><see cref="T:System.Double"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.Double"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.Int32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with X equals d.X, Y equals d.Y, Z equals d.Z and W equals d.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.Single"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with X equals d.X, Y equals d.Y, Z equals d.Z and W equals d.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.Int64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with X equals d.X, Y equals d.Y, Z equals d.Z and W equals d.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.UInt32"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with X equals d.X, Y equals d.Y, Z equals d.Z and W equals d.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:System.UInt64"/> equals d.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals d.X and Y equals d.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals d.X, Y equals d.Y and Z equals d.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Double4.op_Explicit(NoiseEngine.Mathematics.Double4)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Double4"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="d"><see cref="T:NoiseEngine.Mathematics.Double4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with X equals d.X, Y equals d.Y, Z equals d.Z and W equals d.W</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float1.Left">
            <summary>
            Shorthand for writing -1.0f.
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float1.Right">
            <summary>
            Shorthand for writing 1.0f.
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float1.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float1.Distance(System.Single,System.Single)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float1.SquaredDistance(System.Single,System.Single)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float1.Similar(System.Single,System.Single)">
            <summary>
            Checks if a and b are similar enough to be considered as equal
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns><see langword="true"/> if a and b can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.Zero">
            <summary>
            Shorthand for writing Float2(0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.One">
            <summary>
            Shorthand for writing Float2(1.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.PositiveInfinity">
            <summary>
            Shorthand for writing Float2(float.PositiveInfinity, float.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.NegativeInfinity">
            <summary>
            Shorthand for writing Float2(float.NegativeInfinity, float.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.Left">
            <summary>
            Shorthand for writing Float2(-1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.Right">
            <summary>
            Shorthand for writing Float2(1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.Up">
            <summary>
            Shorthand for writing Float2(0.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float2.Down">
            <summary>
            Shorthand for writing Float2(0.0f, -1.0f).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Equals(NoiseEngine.Mathematics.Float2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Similar(NoiseEngine.Mathematics.Float2)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Float2"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Float2"/> to compare <see cref="T:NoiseEngine.Mathematics.Float2"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Float2"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Dot(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Float2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Scale(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Lerp(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.Distance(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.SquaredDistance(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Float2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Addition(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Float2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Subtraction(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Float2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Multiply(NoiseEngine.Mathematics.Float2,System.Single)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Division(NoiseEngine.Mathematics.Float2,System.Single)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Float2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Equality(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Inequality(NoiseEngine.Mathematics.Float2,NoiseEngine.Mathematics.Float2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.Single"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Implicit(System.Single)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:System.Single"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="f"><see cref="T:System.Single"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with Y component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Implicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Implicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.Int32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.Double"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.Int64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.UInt32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:System.UInt64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float2.op_Explicit(NoiseEngine.Mathematics.Float2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Zero">
            <summary>
            Shorthand for writing Float3(0.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.One">
            <summary>
            Shorthand for writing Float3(1.0f, 1.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.PositiveInfinity">
            <summary>
            Shorthand for writing Float3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.NegativeInfinity">
            <summary>
            Shorthand for writing Float3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Left">
            <summary>
            Shorthand for writing Float3(-1.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Right">
            <summary>
            Shorthand for writing Float3(1.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Up">
            <summary>
            Shorthand for writing Float3(0.0f, 1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Down">
            <summary>
            Shorthand for writing Float3(0.0f, -1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Front">
            <summary>
            Shorthand for writing Float3(0.0f, 0.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float3.Back">
            <summary>
            Shorthand for writing Float3(0.0f, 0.0f, -1.0f).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Equals(NoiseEngine.Mathematics.Float3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Similar(NoiseEngine.Mathematics.Float3)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Float3"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Float3"/> to compare <see cref="T:NoiseEngine.Mathematics.Float3"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Float3"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Dot(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Float3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Scale(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Distance(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.SquaredDistance(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.Lerp(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Float3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Addition(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Float3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Subtraction(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Float3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Multiply(NoiseEngine.Mathematics.Float3,System.Single)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Division(NoiseEngine.Mathematics.Float3,System.Single)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Float3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Equality(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Inequality(NoiseEngine.Mathematics.Float3,NoiseEngine.Mathematics.Float3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Implicit(System.Single)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:System.Single"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="f"><see cref="T:System.Single"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Implicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.Single"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.Int32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.Double"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.Int64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.UInt32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:System.UInt64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float3.op_Explicit(NoiseEngine.Mathematics.Float3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z component equals 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Zero">
            <summary>
            Shorthand for writing Float4(0.0f, 0.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.One">
            <summary>
            Shorthand for writing Float4(1.0f, 1.0f, 1.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.PositiveInfinity">
            <summary>
            Shorthand for writing Float4(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.NegativeInfinity">
            <summary>
            Shorthand for writing Float4(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Left">
            <summary>
            Shorthand for writing Float4(-1.0f, 0.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Right">
            <summary>
            Shorthand for writing Float4(1.0f, 0.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Up">
            <summary>
            Shorthand for writing Float4(0.0f, 1.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Down">
            <summary>
            Shorthand for writing Float4(0.0f, -1.0f, 0.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Front">
            <summary>
            Shorthand for writing Float4(0.0f, 0.0f, 1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Back">
            <summary>
            Shorthand for writing Float4(0.0f, 0.0f, -1.0f, 0.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Ana">
            <summary>
            Shorthand for writing Float4(0.0f, 0.0f, 0.0f, 1.0f).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Float4.Kata">
            <summary>
            Shorthand for writing Float4(0.0f, 0.0f, 0.0f, -1.0f).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Equals(NoiseEngine.Mathematics.Float4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Similar(NoiseEngine.Mathematics.Float4)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Float4"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Float4"/> to compare <see cref="T:NoiseEngine.Mathematics.Float4"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Float4"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Dot(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Float4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Scale(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Lerp(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.Distance(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.SquaredDistance(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Float4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Addition(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Float4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Subtraction(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Float4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Multiply(NoiseEngine.Mathematics.Float4,System.Single)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Float4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Division(NoiseEngine.Mathematics.Float4,System.Single)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Float4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="b"><see cref="T:System.Single"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Equality(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Inequality(NoiseEngine.Mathematics.Float4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Float4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Implicit(System.Single)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:System.Single"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="f"><see cref="T:System.Single"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.Single"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.Int32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with X equals f.X, Y equals f.Y, Z equals f.Z and W equals f.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.Double"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with X equals f.X, Y equals f.Y, Z equals f.Z and W equals f.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.Int64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with X equals f.X, Y equals f.Y, Z equals f.Z and W equals f.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.UInt32"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with X equals f.X, Y equals f.Y, Z equals f.Z and W equals f.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:System.UInt64"/> equals f.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals f.X and Y equals f.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals f.X, Y equals f.Y and Z equals f.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Float4.op_Explicit(NoiseEngine.Mathematics.Float4)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Float4"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="f"><see cref="T:NoiseEngine.Mathematics.Float4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with X equals f.X, Y equals f.Y, Z equals f.Z and W equals f.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.IEpsilonEquatable`1.Similar(`0)">
            <summary>
            Checks if T and other are similar enough to be considered as equal
            </summary>
            <param name="other">T to compare T with</param>
            <returns><see langword="true"/> if this T and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int1.Left">
            <summary>
            Shorthand for writing -1.
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int1.Right">
            <summary>
            Shorthand for writing 1.
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int1.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int1.Lerp(System.Int32,System.Int32,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int1.Distance(System.Int32,System.Int32)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Int value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int1.SquaredDistance(System.Int32,System.Int32)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Int value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.Zero">
            <summary>
            Shorthand for writing Int2(0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.One">
            <summary>
            Shorthand for writing Int2(1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.Left">
            <summary>
            Shorthand for writing Int2(-1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.Right">
            <summary>
            Shorthand for writing Int2(1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.Up">
            <summary>
            Shorthand for writing Int2(0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int2.Down">
            <summary>
            Shorthand for writing Int2(0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Equals(NoiseEngine.Mathematics.Int2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Dot(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Int2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Scale(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Lerp(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Lerp(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.Distance(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.SquaredDistance(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Int value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Int2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Addition(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Int2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Subtraction(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Int2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Multiply(NoiseEngine.Mathematics.Int2,System.Int32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Division(NoiseEngine.Mathematics.Int2,System.Int32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Int2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Equality(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Inequality(NoiseEngine.Mathematics.Int2,NoiseEngine.Mathematics.Int2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(System.Int32)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:System.Int32"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with Y component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Implicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int2.op_Explicit(NoiseEngine.Mathematics.Int2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Zero">
            <summary>
            Shorthand for writing Int3(0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.One">
            <summary>
            Shorthand for writing Int3(1, 1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Left">
            <summary>
            Shorthand for writing Int3(-1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Right">
            <summary>
            Shorthand for writing Int3(1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Up">
            <summary>
            Shorthand for writing Int3(0, 1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Down">
            <summary>
            Shorthand for writing Int3(0, -1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Front">
            <summary>
            Shorthand for writing Int3(0, 0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int3.Back">
            <summary>
            Shorthand for writing Int3(0, 0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Equals(NoiseEngine.Mathematics.Int3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Dot(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Int3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Scale(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Lerp(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Lerp(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.Distance(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.SquaredDistance(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Int value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Int3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Addition(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Int3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Subtraction(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Int3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Multiply(NoiseEngine.Mathematics.Int3,System.Int32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Division(NoiseEngine.Mathematics.Int3,System.Int32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Int3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Equality(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Inequality(NoiseEngine.Mathematics.Int3,NoiseEngine.Mathematics.Int3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Implicit(System.Int32)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:System.Int32"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Implicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Implicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Implicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int3.op_Explicit(NoiseEngine.Mathematics.Int3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with W component equals 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Zero">
            <summary>
            Shorthand for writing Int4(0, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.One">
            <summary>
            Shorthand for writing Int4(1, 1, 1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Left">
            <summary>
            Shorthand for writing Int4(-1, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Right">
            <summary>
            Shorthand for writing Int4(1, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Up">
            <summary>
            Shorthand for writing Int4(0, 1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Down">
            <summary>
            Shorthand for writing Int4(0, -1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Front">
            <summary>
            Shorthand for writing Int4(0, 0, 1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Back">
            <summary>
            Shorthand for writing Int4(0, 0, -1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Ana">
            <summary>
            Shorthand for writing Int4(0, 0, 0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Int4.Kata">
            <summary>
            Shorthand for writing Int4(0, 0, 0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Equals(NoiseEngine.Mathematics.Int4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Dot(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Int4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Scale(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Lerp(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Lerp(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.Distance(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.SquaredDistance(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Int value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Int4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Addition(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Int4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Subtraction(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Int4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Multiply(NoiseEngine.Mathematics.Int4,System.Int32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Int4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Division(NoiseEngine.Mathematics.Int4,System.Int32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Int4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="b"><see cref="T:System.Int32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Equality(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Inequality(NoiseEngine.Mathematics.Int4,NoiseEngine.Mathematics.Int4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Int4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Implicit(System.Int32)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:System.Int32"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Implicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Int4.op_Explicit(NoiseEngine.Mathematics.Int4)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Int4"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.Int4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long1.Left">
            <summary>
            Shorthand for writing -1.
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long1.Right">
            <summary>
            Shorthand for writing 1.
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long1.Lerp(System.Int64,System.Int64,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long1.Lerp(System.Int64,System.Int64,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long1.Distance(System.Int64,System.Int64)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Long value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long1.SquaredDistance(System.Int64,System.Int64)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Long value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.Zero">
            <summary>
            Shorthand for writing Long2(0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.One">
            <summary>
            Shorthand for writing Long2(1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.Left">
            <summary>
            Shorthand for writing Long2(-1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.Right">
            <summary>
            Shorthand for writing Long2(1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.Up">
            <summary>
            Shorthand for writing Long2(0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long2.Down">
            <summary>
            Shorthand for writing Long2(0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed longeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Equals(NoiseEngine.Mathematics.Long2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Dot(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Long2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Scale(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Lerp(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Lerp(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.Distance(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.SquaredDistance(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Long value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Long2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Addition(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Long2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Subtraction(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Long2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Multiply(NoiseEngine.Mathematics.Long2,System.Int64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Division(NoiseEngine.Mathematics.Long2,System.Int64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Long2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Equality(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Inequality(NoiseEngine.Mathematics.Long2,NoiseEngine.Mathematics.Long2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Implicit(System.Int64)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:System.Int64"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:System.Int64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with Y component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Implicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Implicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long2.op_Explicit(NoiseEngine.Mathematics.Long2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Zero">
            <summary>
            Shorthand for writing Long3(0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.One">
            <summary>
            Shorthand for writing Long3(1, 1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Left">
            <summary>
            Shorthand for writing Long3(-1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Right">
            <summary>
            Shorthand for writing Long3(1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Up">
            <summary>
            Shorthand for writing Long3(0, 1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Down">
            <summary>
            Shorthand for writing Long3(0, -1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Front">
            <summary>
            Shorthand for writing Long3(0, 0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long3.Back">
            <summary>
            Shorthand for writing Long3(0, 0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed longeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Equals(NoiseEngine.Mathematics.Long3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Dot(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Long3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Scale(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Lerp(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Lerp(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.Distance(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.SquaredDistance(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Long value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Long3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Addition(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Long3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Subtraction(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Long3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Multiply(NoiseEngine.Mathematics.Long3,System.Int64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Division(NoiseEngine.Mathematics.Long3,System.Int64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Long3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Equality(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Inequality(NoiseEngine.Mathematics.Long3,NoiseEngine.Mathematics.Long3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Implicit(System.Int64)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:System.Int64"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:System.Int64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Implicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long3.op_Explicit(NoiseEngine.Mathematics.Long3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with W component equals 0</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Zero">
            <summary>
            Shorthand for writing Long4(0, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.One">
            <summary>
            Shorthand for writing Long4(1, 1, 1, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Left">
            <summary>
            Shorthand for writing Long4(-1, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Right">
            <summary>
            Shorthand for writing Long4(1, 0, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Up">
            <summary>
            Shorthand for writing Long4(0, 1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Down">
            <summary>
            Shorthand for writing Long4(0, -1, 0, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Front">
            <summary>
            Shorthand for writing Long4(0, 0, 1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Back">
            <summary>
            Shorthand for writing Long4(0, 0, -1, 0).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Ana">
            <summary>
            Shorthand for writing Long4(0, 0, 0, 1).
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Long4.Kata">
            <summary>
            Shorthand for writing Long4(0, 0, 0, -1).
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed longeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Equals(NoiseEngine.Mathematics.Long4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Dot(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Long4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Scale(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Lerp(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Lerp(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.Distance(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.SquaredDistance(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Long value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Long4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Addition(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.Long4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Subtraction(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.Long4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Multiply(NoiseEngine.Mathematics.Long4,System.Int64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.Long4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Division(NoiseEngine.Mathematics.Long4,System.Int64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.Long4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="b"><see cref="T:System.Int64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Equality(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Inequality(NoiseEngine.Mathematics.Long4,NoiseEngine.Mathematics.Long4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Long4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Implicit(System.Int64)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:System.Int64"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:System.Int64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Long4.op_Explicit(NoiseEngine.Mathematics.Long4)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.Long4"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.Long4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Scale(NoiseEngine.Mathematics.Float3)">
            <summary>
            Creates a scaling matrix
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Translate(NoiseEngine.Mathematics.Float3)">
            <summary>
            Creates a translation matrix
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Rotate(NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Creates a rotation matrix
            </summary>
            <param name="q">Rotation</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.OrthographicProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <returns>
            Orthographic projection Matrix4x4
            </returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.PerspectiveProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <returns>
            Perspective projection Matrix4x4
            </returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.MultiplyPoint(NoiseEngine.Mathematics.Float3)">
            <summary>
            Transforms a position by this matrix, with a perspective divide
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.MultiplyPoint3x4(NoiseEngine.Mathematics.Float3)">
            <summary>
            Transforms a position by this matrix, without a perspective divide
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.MultiplyVector(NoiseEngine.Mathematics.Float3)">
            <summary>
            Transforms a direction by this matrix
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Equals(NoiseEngine.Mathematics.Matrix4x4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Similar(NoiseEngine.Mathematics.Matrix4x4)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Matrix4x4"/> to compare <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed int that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.op_Multiply(NoiseEngine.Mathematics.Matrix4x4,NoiseEngine.Mathematics.Float4)">
            <summary>
            Transforms a Float4 by a matrix
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.op_Multiply(NoiseEngine.Mathematics.Matrix4x4,NoiseEngine.Mathematics.Matrix4x4)">
            <summary>
            Multiplies two matrices
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.op_Equality(NoiseEngine.Mathematics.Matrix4x4,NoiseEngine.Mathematics.Matrix4x4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/>s are equal
            </summary>
            <param name="lhs">First <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/></param>
            <param name="rhs">Second <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Matrix4x4.op_Inequality(NoiseEngine.Mathematics.Matrix4x4,NoiseEngine.Mathematics.Matrix4x4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/>s are not equal
            </summary>
            <param name="lhs">First <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/></param>
            <param name="rhs">Second <see cref="T:NoiseEngine.Mathematics.Matrix4x4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="P:NoiseEngine.Mathematics.Quaternion.EulerAngles">
            <summary>
            Angles of rotation in radians in three dimensions that represents this Quaternion
            </summary>
        </member>
        <member name="P:NoiseEngine.Mathematics.Quaternion.Identity">
            <summary>
            Quaternion that represents not rotated object (with euler rotation angles (0, 0, 0))
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Dot(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.Quaternion"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.Quaternion"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.Quaternion"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Angle(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Calculates angle in radians between two rotations
            </summary>
            <param name="a">First rotation</param>
            <param name="b">Second rotation</param>
            <returns>Angle in radians between two rotations</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Normalize(NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Normalizes <see cref="T:NoiseEngine.Mathematics.Quaternion"/> that it's elements are between 0 and 1
            </summary>
            <param name="q"><see cref="T:NoiseEngine.Mathematics.Quaternion"/> value</param>
            <returns>Normalized <see cref="T:NoiseEngine.Mathematics.Quaternion"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.ToEulerAngles(NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Converts <see cref="T:NoiseEngine.Mathematics.Quaternion"/> q to <see cref="T:NoiseEngine.Mathematics.Float3"/> with euler angles in radians
            </summary>
            <param name="q"><see cref="T:NoiseEngine.Mathematics.Quaternion"/> value</param>
            <returns>Euler angles of q</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.FromEulerAngles(NoiseEngine.Mathematics.Float3)">
            <summary>
            Converts <see cref="T:NoiseEngine.Mathematics.Float3"/> with euler angles in radians to <see cref="T:NoiseEngine.Mathematics.Quaternion"/>
            </summary>
            <param name="angles">Euler angles in radians</param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> representation of angles</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.FromEulerAngles(NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat,NoiseEngine.Mathematics.AngleFloat)">
            <summary>
            Converts euler angles in radians to <see cref="T:NoiseEngine.Mathematics.Quaternion"/>
            </summary>
            <param name="x">Pitch euler angle</param>
            <param name="y">Yaw euler angle</param>
            <param name="z">Roll euler angle</param>
            <returns><see cref="T:NoiseEngine.Mathematics.Quaternion"/> representation of angles</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Normalize">
            <summary>
            Normalizes this <see cref="T:NoiseEngine.Mathematics.Quaternion"/> that it's elements are between 0 and 1
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Equals(NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Checks if two quaternions are equal
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>True if the current object is considered equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Similar(NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Checks if <see cref="T:NoiseEngine.Mathematics.Quaternion"/> and other are similar enough to be considered as equal
            </summary>
            <param name="other"><see cref="T:NoiseEngine.Mathematics.Quaternion"/> to compare <see cref="T:NoiseEngine.Mathematics.Quaternion"/> with</param>
            <returns><see langword="true"/> if this <see cref="T:NoiseEngine.Mathematics.Quaternion"/> and other can be considered as equal, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.GetHashCode">
            <summary>
            Calculates hash code for this instance
            </summary>
            <returns>A 32-bit signed int that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.Quaternion"/> to string
            </summary>
            <returns>String representation of this <see cref="T:NoiseEngine.Mathematics.Quaternion"/></returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.op_Multiply(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Combines two rotations
            </summary>
            <param name="lhs">First rotation</param>
            <param name="rhs">Second rotation</param>
            <returns>Combined lhs and rhs rotation</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.op_Multiply(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Float3)">
            <summary>
            Rotates point by rotation
            </summary>
            <param name="rotation">Rotation that point will be rotated by</param>
            <param name="point">Point that will be rotated</param>
            <returns>Rotated point</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.op_Equality(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Quaternion"/>s are equal
            </summary>
            <param name="lhs">First rotation</param>
            <param name="rhs">Second rotation</param>
            <returns>True if lhs equals rhs, otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.Quaternion.op_Inequality(NoiseEngine.Mathematics.Quaternion,NoiseEngine.Mathematics.Quaternion)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.Quaternion"/>s are not equal
            </summary>
            <param name="lhs">First rotation</param>
            <param name="rhs">Second rotation</param>
            <returns>True if lhs is not equal rhs, otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt1.Lerp(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt1.Lerp(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt1.Distance(System.UInt32,System.UInt32)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>UInt value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt1.SquaredDistance(System.UInt32,System.UInt32)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>UInt value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Equals(NoiseEngine.Mathematics.UInt2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Dot(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Scale(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Lerp(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Lerp(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.Distance(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.SquaredDistance(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>UInt value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.UInt2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Addition(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Subtraction(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Multiply(NoiseEngine.Mathematics.UInt2,System.UInt32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Division(NoiseEngine.Mathematics.UInt2,System.UInt32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Equality(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Inequality(NoiseEngine.Mathematics.UInt2,NoiseEngine.Mathematics.UInt2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(System.UInt32)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:System.UInt32"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:System.UInt32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with Y component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Explicit(NoiseEngine.Mathematics.UInt2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt2.op_Implicit(NoiseEngine.Mathematics.UInt2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed uinteger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Equals(NoiseEngine.Mathematics.UInt3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Dot(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Scale(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Lerp(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Lerp(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.Distance(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.SquaredDistance(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>UInt value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.UInt3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Addition(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Subtraction(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Multiply(NoiseEngine.Mathematics.UInt3,System.UInt32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Division(NoiseEngine.Mathematics.UInt3,System.UInt32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Equality(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Inequality(NoiseEngine.Mathematics.UInt3,NoiseEngine.Mathematics.UInt3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(System.UInt32)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:System.UInt32"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:System.UInt32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Explicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt3.op_Implicit(NoiseEngine.Mathematics.UInt3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed uinteger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Equals(NoiseEngine.Mathematics.UInt4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Dot(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Scale(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Lerp(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Lerp(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.Distance(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Float value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.SquaredDistance(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>UInt value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.UInt4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Addition(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Subtraction(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Multiply(NoiseEngine.Mathematics.UInt4,System.UInt32)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Division(NoiseEngine.Mathematics.UInt4,System.UInt32)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="b"><see cref="T:System.UInt32"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Equality(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Inequality(NoiseEngine.Mathematics.UInt4,NoiseEngine.Mathematics.UInt4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.UInt4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Implicit(System.UInt32)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:System.UInt32"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="i"><see cref="T:System.UInt32"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.UInt32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.Single"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.Double"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.Int64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Implicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.Int32"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:System.UInt64"/> equals i.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals i.X and Y equals i.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Explicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt3"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals i.X, Y equals i.Y and Z equals i.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.UInt4.op_Implicit(NoiseEngine.Mathematics.UInt4)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.UInt4"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="i"><see cref="T:NoiseEngine.Mathematics.UInt4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with X equals i.X, Y equals i.Y, Z equals i.Z and W equals i.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong1.Lerp(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong1.Lerp(System.UInt64,System.UInt64,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong1.Distance(System.UInt64,System.UInt64)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>ULong value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong1.SquaredDistance(System.UInt64,System.UInt64)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>ULong value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed ulongeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Equals(NoiseEngine.Mathematics.ULong2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Dot(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Scale(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Lerp(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Lerp(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double2 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.Distance(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.SquaredDistance(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>ULong value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.ULong2"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Addition(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Subtraction(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Multiply(NoiseEngine.Mathematics.ULong2,System.UInt64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Division(NoiseEngine.Mathematics.ULong2,System.UInt64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Equality(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Inequality(NoiseEngine.Mathematics.ULong2,NoiseEngine.Mathematics.ULong2)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong2"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Implicit(System.UInt64)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:System.UInt64"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:System.UInt64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with Y component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Implicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Implicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with Z component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong2.op_Explicit(NoiseEngine.Mathematics.ULong2)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong2"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong2"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed ulongeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Equals(NoiseEngine.Mathematics.ULong3)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Dot(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Scale(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Lerp(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Lerp(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double3 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.Distance(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.SquaredDistance(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>ULong value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.ULong3"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Addition(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Subtraction(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Multiply(NoiseEngine.Mathematics.ULong3,System.UInt64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Division(NoiseEngine.Mathematics.ULong3,System.UInt64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Equality(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Inequality(NoiseEngine.Mathematics.ULong3,NoiseEngine.Mathematics.ULong3)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong3"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Implicit(System.UInt64)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:System.UInt64"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:System.UInt64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with Y and Z components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Implicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong3.op_Explicit(NoiseEngine.Mathematics.ULong3)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with W component equals 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj">The object to compare with the current instance</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns>A 32-bit signed ulongeger that is the hash code for this instance</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Equals(NoiseEngine.Mathematics.ULong4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Dot(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Calculates dot product of two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns>Dot product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Scale(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s component-wise
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> in which every component is a component of a multiplied by the same component of b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Lerp(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4,System.Single)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Float4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Lerp(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4,System.Double)">
            <summary>
            Linearly interpolates between two points
            </summary>
            <param name="a">Start value, returned when t = 0</param>
            <param name="b">End value, returned when t = 1</param>
            <param name="t">Not clamped value used to interpolate between a and b</param>
            <returns>Double4 interpolated value, equals to a + (b - a) * t</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.Distance(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Calculates euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Double value, equals to euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.SquaredDistance(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Calculates squared euclidean distance between two points
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>ULong value, equals to squared euclidean distance between a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.Mathematics.ULong4"/> to string
            </summary>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Addition(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Adds two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Subtraction(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Subtracts two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s
            </summary>
            <param name="a">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns>Sum of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Multiply(NoiseEngine.Mathematics.ULong4,System.UInt64)">
            <summary>
            Multiplies two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Product of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Division(NoiseEngine.Mathematics.ULong4,System.UInt64)">
            <summary>
            Divides two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s
            </summary>
            <param name="a"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="b"><see cref="T:System.UInt64"/></param>
            <returns>Quotient of a and b</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Equality(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s are equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns>True if left is equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Inequality(NoiseEngine.Mathematics.ULong4,NoiseEngine.Mathematics.ULong4)">
            <summary>
            Checks if two <see cref="T:NoiseEngine.Mathematics.ULong4"/>s are not equal
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <param name="right">Second <see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns>True if left is not equal to right; otherwise false</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Implicit(System.UInt64)~NoiseEngine.Mathematics.ULong4">
            <summary>
            Casts <see cref="T:System.UInt64"/> to <see cref="T:NoiseEngine.Mathematics.ULong4"/>
            </summary>
            <param name="l"><see cref="T:System.UInt64"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong4"/> with Y, Z and W components equal 0</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.UInt64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.UInt64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.UInt64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.ULong2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.ULong2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.ULong3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.ULong3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.ULong3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.Single">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.Single"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.Single"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Float2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Float2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Float3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Float3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Float4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.Float4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Float4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.Double">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.Double"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.Double"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Double2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Double2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Double3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Double3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Double4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.Double4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Double4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.Int32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.Int32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.Int32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Int2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Int2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Int3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Int3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Int4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.Int4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Int4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.UInt32">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.UInt32"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.UInt32"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.UInt2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.UInt2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.UInt3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.UInt3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.UInt4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.UInt4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.UInt4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~System.Int64">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:System.Int64"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:System.Int64"/> equals l.X</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Long2">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Long2"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long2"/> with X equals l.X and Y equals l.Y</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Long3">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong3"/> to <see cref="T:NoiseEngine.Mathematics.Long3"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong3"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long3"/> with X equals l.X, Y equals l.Y and Z equals l.Z</returns>
        </member>
        <member name="M:NoiseEngine.Mathematics.ULong4.op_Explicit(NoiseEngine.Mathematics.ULong4)~NoiseEngine.Mathematics.Long4">
            <summary>
            Casts <see cref="T:NoiseEngine.Mathematics.ULong4"/> to <see cref="T:NoiseEngine.Mathematics.Long4"/>
            </summary>
            <param name="l"><see cref="T:NoiseEngine.Mathematics.ULong4"/></param>
            <returns><see cref="T:NoiseEngine.Mathematics.Long4"/> with X equals l.X, Y equals l.Y, Z equals l.Z and W equals l.W</returns>
        </member>
    </members>
</doc>
