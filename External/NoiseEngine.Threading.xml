<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoiseEngine.Threading</name>
    </assembly>
    <members>
        <member name="M:NoiseEngine.Threading.AtomicBool.Exchange(System.Boolean)">
            <summary>
            Sets this <see cref="T:NoiseEngine.Threading.AtomicBool"/> to a specified value and returns the original value,
            as an atomic operation.
            </summary>
            <param name="value">The value to which this <see cref="T:NoiseEngine.Threading.AtomicBool"/> is set.</param>
            <returns>The original value of this <see cref="T:NoiseEngine.Threading.AtomicBool"/>.</returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.Equals(NoiseEngine.Threading.AtomicBool)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified other <see cref="T:NoiseEngine.Threading.AtomicBool"/>.
            </summary>
            <param name="other">An <see cref="T:NoiseEngine.Threading.AtomicBool"/> to compare to this instance.</param>
            <returns>
            <see langword="true"/> if obj is an instance of <see cref="T:NoiseEngine.Threading.AtomicBool"/> and equals
            the value of this instance, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if obj is an instance of <see cref="T:NoiseEngine.Threading.AtomicBool"/> and equals
            the value of this instance, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.ToString">
            <summary>
            Converts this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.op_Equality(NoiseEngine.Threading.AtomicBool,NoiseEngine.Threading.AtomicBool)">
            <summary>
            Returns a value indicating whether <paramref name="left"/> is equal to a <paramref name="right"/>.
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Threading.AtomicBool"/>.</param>
            <param name="right">Second <see cref="T:NoiseEngine.Threading.AtomicBool"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.op_Inequality(NoiseEngine.Threading.AtomicBool,NoiseEngine.Threading.AtomicBool)">
            <summary>
            Returns a value indicating whether <paramref name="left"/> is not equal to a <paramref name="right"/>.
            </summary>
            <param name="left">First <see cref="T:NoiseEngine.Threading.AtomicBool"/>.</param>
            <param name="right">Second <see cref="T:NoiseEngine.Threading.AtomicBool"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>,
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.op_Implicit(NoiseEngine.Threading.AtomicBool)~System.Boolean">
            <summary>
            Converts <paramref name="atomicBool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="atomicBool"><see cref="T:NoiseEngine.Threading.AtomicBool"/> to convert.</param>
        </member>
        <member name="M:NoiseEngine.Threading.AtomicBool.op_Implicit(System.Boolean)~NoiseEngine.Threading.AtomicBool">
            <summary>
            Converts <paramref name="b"/> to <see cref="T:NoiseEngine.Threading.AtomicBool"/>.
            </summary>
            <param name="b"><see cref="T:System.Boolean"/> to convert.</param>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvoker.#ctor(System.String,NoiseEngine.Logging.Logger)">
            <summary>
            Creates a <see cref="T:NoiseEngine.Threading.SingleThreadInvoker"/> instance.
            </summary>
            <param name="threadName">Name of the thread to spawn.</param>
            <param name="logger">Logger to use when exception is thrown.</param>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvoker.Execute(System.Action)">
            <summary>
            Enqueues <paramref name="action"/> for execution on the worker thread.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvoker.ExecuteAndWait(System.Action)">
            <summary>
            Enqueues <paramref name="action"/> for execution and waits for its completion.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvoker.Destroy">
            <summary>
            Signals worker thread to stop after executing remaining actions.
            This method does not wait for thread to finish.
            </summary>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvokerWorker.Execute(System.Action)">
            <summary>
            Enqueues <paramref name="action"/> for execution on the worker thread.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:NoiseEngine.Threading.SingleThreadInvokerWorker.ExecuteAndWait(System.Action)">
            <summary>
            Enqueues <paramref name="action"/> for execution and waits for its completion.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
    </members>
</doc>
