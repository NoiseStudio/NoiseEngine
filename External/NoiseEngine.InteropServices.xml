<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoiseEngine.InteropServices</name>
    </assembly>
    <members>
        <member name="M:NoiseEngine.InteropServices.InteropServicesManager.Initialize(NoiseEngine.Logging.Logger)">
            <summary>
            Initialize library with <paramref name="logger"/> and other necessary resources.
            </summary>
        </member>
        <member name="M:NoiseEngine.InteropServices.InteropServicesManager.Terminate">
            <summary>
            Finalize library.
            </summary>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor">
            <summary>
            Do not use default constructor for this type, always throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Always throws <see cref="T:System.InvalidOperationException"/>.
            </exception>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor(`0[])">
            <summary>
            Creates new <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> with shallow copy of <paramref name="array"/>.
            </summary>
            <param name="array">Source array.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Creates new <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> with shallow copy of <paramref name="readOnlySpan"/>.
            </summary>
            <param name="readOnlySpan">Source <see cref="T:System.ReadOnlySpan`1"/>.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor(System.Int32)">
            <summary>
            Allocates unmanaged memory buffer with specified element count.
            </summary>
            <param name="length">Count of the elements in unmanaged memory.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor(System.Int32,System.IntPtr,System.Boolean)">
            <summary>
            Creates <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> without allocation.
            <paramref name="handle"/> must be a valid pointer to memory with specified element count.
            </summary>
            <param name="length">Count of the elements in unmanaged memory.</param>
            <param name="handle">Pointer to unmanaged memory.</param>
            <param name="createdNatively">Determines whether memory was allocated natively.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates new <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> with shallow copy of <paramref name="list"/>.
            </summary>
            <param name="list">Source list.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.SetRange(System.ReadOnlySpan{`0},System.Int32)">
            <summary>
            Sets a range of array elements beginning at specified index.
            </summary>
            <param name="source">Source of the elements.</param>
            <param name="firstIndex">Index at which storing begins.</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.ToArray">
            <summary>
            Copy this <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> values to <see cref="T:System.Array"/>.
            </summary>
            <returns><see cref="T:System.Array"/> with values from <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.As``1">
            <summary>
            Reinterprets this <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> as new
            <see cref="T:NoiseEngine.InteropServices.NativeArray`1"/> with <typeparamref name="TResult"/> as its elements.
            This method invalidates current instance.
            </summary>
            <typeparam name="TResult">Type of the element in the resulting array.</typeparam>
            <returns>Array of type <typeparamref name="TResult"/> pointing to the same memory.</returns>
            <exception cref="T:System.InvalidOperationException">
            Current array cannot be safely reinterpreted due to type sizes.
            </exception>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.Dispose">
            <summary>
            Deallocates unmanaged memory at address <see cref="P:NoiseEngine.InteropServices.NativeArray`1.Handle"/>.
            </summary>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.GetEnumerator">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Exposes an enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.Equals(NoiseEngine.InteropServices.NativeBool)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified other <see cref="T:NoiseEngine.InteropServices.NativeBool"/>.
            </summary>
            <param name="other">An <see cref="T:NoiseEngine.InteropServices.NativeBool"/> to compare to this instance.</param>
            <returns><see langword="true"/> if obj is an instance of <see cref="T:NoiseEngine.InteropServices.NativeBool"/>and equals
            the value of this instance, otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns><see langword="true"/> if obj is an instance of <see cref="T:NoiseEngine.InteropServices.NativeBool"/>and equals
            the value of this instance, otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.ToString">
            <summary>
            Converts the this instance to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.op_Equality(NoiseEngine.InteropServices.NativeBool,NoiseEngine.InteropServices.NativeBool)">
            <summary>
            Returns a value indicating whether this instance left is equal to a instance right.
            </summary>
            <param name="left"><see cref="T:NoiseEngine.InteropServices.NativeBool"/>.</param>
            <param name="right"><see cref="T:NoiseEngine.InteropServices.NativeBool"/>.</param>
            <returns><see langword="true"/> if left <see cref="T:NoiseEngine.InteropServices.NativeBool"/> is an
            instance of right <see cref="T:NoiseEngine.InteropServices.NativeBool"/> and equals the value of this
            instance, otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.op_Inequality(NoiseEngine.InteropServices.NativeBool,NoiseEngine.InteropServices.NativeBool)">
            <summary>
            Returns a value indicating whether this instance left is not equal to a instance right.
            </summary>
            <param name="left"><see cref="T:NoiseEngine.InteropServices.NativeBool"/>.</param>
            <param name="right"><see cref="T:NoiseEngine.InteropServices.NativeBool"/>.</param>
            <returns><see langword="false"/> if left <see cref="T:NoiseEngine.InteropServices.NativeBool"/> is an
            instance of right <see cref="T:NoiseEngine.InteropServices.NativeBool"/> and equals the value of this
            instance, otherwise returns <see langword="true"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.op_Implicit(NoiseEngine.InteropServices.NativeBool)~System.Boolean">
            <summary>
            Converts <paramref name="nativeBool"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="nativeBool"><see cref="T:NoiseEngine.InteropServices.NativeBool"/>.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeBool.op_Implicit(System.Boolean)~NoiseEngine.InteropServices.NativeBool">
            <summary>
            Converts <paramref name="b"/> to <see cref="T:NoiseEngine.InteropServices.NativeBool"/>.
            </summary>
            <param name="b"><see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeHandle`1.ToString">
            <summary>
            Returns a text representation of the <see cref="T:NoiseEngine.InteropServices.NativeHandle`1"/> object.
            </summary>
            <returns>Text representation of the <see cref="T:NoiseEngine.InteropServices.NativeHandle`1"/> object.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativePointer`1.GetValue">
            <summary>
            Returns struct from this <see cref="T:NoiseEngine.InteropServices.NativePointer`1"/>.
            </summary>
            <returns>T struct.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativePointer`1.TryGetValue(`0@)">
            <summary>
            Try returns struct from this <see cref="T:NoiseEngine.InteropServices.NativePointer`1"/>.
            </summary>
            <param name="value">T struct.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> was
            successfully returned, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativePointer`1.SetValue(`0)">
            <summary>
            Set value for this <see cref="T:NoiseEngine.InteropServices.NativePointer`1"/>.
            </summary>
            <param name="value">T struct.</param>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeString.#ctor">
            <summary>
            Do not use default constructor for this type, always throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Always throws <see cref="T:System.InvalidOperationException"/>.
            </exception>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeString.Dispose">
            <summary>
            Deallocates unmanaged memory.
            </summary>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeString.ToString">
            <summary>
            Converts this <see cref="T:NoiseEngine.InteropServices.NativeString"/> to <see cref="T:System.String"/>.
            </summary>
            <returns><see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:NoiseEngine.InteropServices.NativeString.op_Implicit(NoiseEngine.InteropServices.NativeString)~System.String">
            <summary>
            Converts <paramref name="nativeString"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="nativeString"><see cref="T:NoiseEngine.InteropServices.NativeString"/>.</param>
        </member>
    </members>
</doc>
