using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using NoiseEngine.InternalGenerator.Jobs;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs {
    [Generator]
    public class JobSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.AppendLine("// <auto-generated />").AppendLine();
                builder.AppendLine("using System;");
                builder.AppendLine().AppendLine("namespace NoiseEngine.Jobs;").AppendLine();

                builder.AppendLine("#nullable enable");
                builder.Append("internal sealed class Job<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.AppendLine("> : Job {").AppendLine();

                builder.AppendIndentation().Append("private Action<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.AppendLine(">? method;").AppendLine();

                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation().Append('T').Append(j).Append("? a").Append(j).AppendLine(";");
                builder.AppendLine();

                builder.AppendIndentation().Append("public override Delegate? Delegate => method;").AppendLine();

                // Constructor
                builder.AppendIndentation().Append("public Job(JobsWorld world, long rawTime, Action<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.Append("> method");

                for (int j = 1; j <= i; j++)
                    builder.Append(", T").Append(j).Append(" a").Append(j);
                builder.AppendLine(") : base(world, rawTime) {");

                builder.AppendIndentation(2).AppendLine("this.method = method;");
                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation(2).Append("this.a").Append(j).Append(" = a").Append(j).AppendLine(";");

                builder.AppendIndentation().AppendLine("}").AppendLine();

                // Dispose worker.
                builder.AppendIndentation().Append("private protected override void DisposeWorker() {");
                builder.AppendIndentation(2).AppendLine("method = null;");
                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation(2).Append('a').Append(j).AppendLine(" = default;");
                builder.AppendIndentation().AppendLine("}").AppendLine();

                // Invoke worker.
                builder.AppendIndentation().Append("private protected override void InvokeWorker() {");
                builder.AppendIndentation(2).AppendLine("method?.Invoke(");
                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation(2).Append('a').Append(j).Append("!, ");
                builder.Remove(builder.Length - 2, 2);
                builder.AppendLine(");");
                builder.AppendIndentation().AppendLine("}").AppendLine();

                builder.AppendLine("}");

                context.AddSource($"JobT{i}.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
                builder.Clear();
            }
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

    }
}
