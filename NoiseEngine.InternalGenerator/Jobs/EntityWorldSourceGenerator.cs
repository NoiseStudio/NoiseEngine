using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs {
    [Generator]
    public class EntityWorldSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated />").AppendLine();
            builder.AppendLine("using System;").AppendLine("using System.Runtime.CompilerServices;");
            builder.AppendLine("using System.Collections.Generic;").AppendLine("using NoiseEngine.Jobs.Commands;");
            builder.AppendLine().AppendLine("namespace NoiseEngine.Jobs;").AppendLine();

            builder.AppendLine("#nullable enable");
            builder.AppendLine("public partial class EntityWorld {").AppendLine();

            CreateObserverDelegates(builder);
            CreateSpawnMethods(builder);
            CreateAddObserverMethods(builder);
            CreateGetQueryMethods(builder);

            builder.AppendLine("}").AppendLine();

            context.AddSource("EntityWorld.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

        private void CreateObserverDelegates(StringBuilder builder) {
            builder.AppendIndentation(1).AppendLine("public static class Observers {").AppendLine();

            CreateObserverDelegatesWorker(builder, "Changed", "Changed<T1>");
            //CreateObserverDelegatesWorker(builder, "AddedOrChanged", "AddedOrChanged<T1>");
            //CreateObserverDelegatesWorker(builder, "", "T1");

            CreateObserverInvokersWorker(builder, "Changed", "Changed<T1>");
            //CreateObserverInvokersWorker(builder, "AddedOrChanged", "AddedOrChanged<T1>");
            //CreateObserverInvokersWorker(builder, "", "T1");

            builder.AppendIndentation(1).AppendLine("}").AppendLine();
        }

        private void CreateObserverDelegatesWorker(StringBuilder builder, string name, string component1Type) {
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                for (int j = 0; j < 2; j++) {
                    builder.AppendIndentation(2).Append("public delegate void ").Append(name).Append("ObserverT")
                        .Append(i).Append(j == 0 ? "C" : "").Append("<T1");
                    for (int k = 2; k <= i; k++)
                        builder.Append(", T").Append(k);

                    builder.Append(">(Entity entity, ");
                    if (j == 0)
                        builder.Append("SystemCommands commands, ");
                    builder.Append(component1Type).Append(" changed");

                    for (int k = 2; k <= i; k++)
                        builder.Append(", T").Append(k).Append(" component").Append((char)(63 + k));

                    builder.AppendLine(")");
                    for (int k = 1; k <= i; k++) {
                        builder.AppendIndentation(3).Append("where T").Append(k).Append(" : IComponent")
                            .AppendLine(k == i ? ";" : "");
                    }
                }
            }

            builder.AppendLine();
        }

        private void CreateObserverInvokersWorker(StringBuilder builder, string name, string component1Type) {
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                for (int j = 0; j < 2; j++) {
                    builder.AppendIndentation(2).Append("internal static unsafe void ").Append(name).Append("ObserverT")
                        .Append(i).Append(j == 0 ? "C" : "").Append("Invoker<T1");
                    for (int k = 2; k <= i; k++)
                        builder.Append(", T").Append(k);

                    builder.AppendLine(">(");
                    builder.AppendIndentation(3).AppendLine(
                        "Delegate observer, Entity entity, SystemCommandsInner commands, nint ptr, " +
                        "Dictionary<Type, nint> offsets, ref byte oldValue"
                    );
                    builder.AppendIndentation(2).AppendLine(")");

                    for (int k = 1; k <= i; k++)
                        builder.AppendIndentation(3).Append("where T").Append(k).AppendLine(" : IComponent");
                    builder.AppendIndentation(2).AppendLine("{");

                    builder.AppendIndentation(3).AppendLine(
                        "Changed<T1> c = new Changed<T1>(Unsafe.ReadUnaligned<T1>(ref oldValue), Unsafe.ReadUnaligned" +
                        "<T1>((void*)(ptr + offsets[typeof(T1)])));"
                    );
                    builder.AppendIndentation(3).Append("((").Append(name).Append("ObserverT").Append(i)
                        .Append(j == 0 ? "C" : "").Append("<T1");
                    for (int k = 2; k <= i; k++)
                        builder.Append(", T").Append(k);
                    builder.AppendLine(">)observer).Invoke(");
                    builder.AppendIndentation(4).Append("entity");

                    if (j == 0)
                        builder.Append(", new SystemCommands(commands)");
                    builder.Append(", c");

                    for (int k = 2; k <= i; k++) {
                        builder.AppendLine(",").AppendIndentation(4).Append("Unsafe.ReadUnaligned<T").Append(k)
                            .Append(">((void*)(ptr + offsets[typeof(T").Append(k).Append(")]))");
                    }
                    builder.AppendLine().AppendIndentation(3).AppendLine(");");

                    builder.AppendIndentation(2).AppendLine("}").AppendLine();
                }
            }
        }

        private void CreateAddObserverMethods(StringBuilder builder) {
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                for (int j = 0; j < 2; j++) {
                    builder.AppendLine(@"    /// <summary>
    /// Adds <paramref name=""observer""/> to this <see cref=""EntityWorld""/> as changed observer.
    /// </summary>
    /// <remarks>
    /// If a component required by the <paramref name=""observer""/> is removed within the scope of a single component
    /// set change, the <paramref name=""observer""/> will not be invoked.
    /// </remarks>");

                    for (int k = 1; k <= i; k++) {
                        builder.AppendIndentation().Append("/// <typeparam name=\"T").Append(k)
                            .AppendLine("\">Type of <see cref=\"IComponent\"/>.</typeparam>");
                    }

                    builder.Append(@"    /// <param name=""observer"">Changed Entity Observer.</param>
    /// <returns>New <see cref=""EntityObserverLifetime""/> used to disposing this <paramref name=""observer""/>.</returns>
    public EntityObserverLifetime AddChangedObserver<");

                    for (int k = 1; k <= i; k++)
                        builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                    builder.Append(">(Observers.ChangedObserverT").Append(i);
                    if (j == 0)
                        builder.Append("C");

                    builder.Append("<");
                    for (int k = 1; k <= i; k++)
                        builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                    builder.AppendLine("> observer)");

                    for (int k = 1; k <= i; k++)
                        builder.AppendIndentation(2).Append("where T").Append(k).AppendLine(" : IComponent");
                    builder.AppendIndentation(1).AppendLine("{");

                    builder.AppendIndentation(2).Append("return AddChangedObserverWorker(Observers.ChangedObserverT");
                    builder.Append(i);
                    if (j == 0)
                        builder.Append("C");
                    builder.Append("Invoker<");
                    for (int k = 1; k <= i; k++)
                        builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                    builder.AppendLine(">, observer, new List<Type> {");

                    builder.AppendIndentation(3).Append("typeof(T1)");
                    for (int k = 2; k <= i; k++)
                        builder.Append(", typeof(T").Append(k).Append(')');
                    builder.AppendLine().AppendIndentation(2).AppendLine("});");

                    builder.AppendIndentation(1).AppendLine("}").AppendLine();
                }
            }
        }

        private void CreateSpawnMethods(StringBuilder builder) {
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.AppendLine(@"    /// <summary>
    /// Spawns new <see cref=""Entity""/> with specified components.
    /// </summary>");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <typeparam name=\"T").Append(j)
                        .AppendLine("\">Type of <see cref=\"IComponent\"/>.</typeparam>");
                }

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <param name=\"component").Append(j).Append("\">Value of T")
                        .Append(j).AppendLine(" component.</param>");
                }

                builder.AppendIndentation().AppendLine("/// <returns>New <see cref=\"Entity\"/>.</returns>");
                builder.AppendIndentation().Append("public Entity Spawn<");

                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(j == i ? "" : ", ");
                builder.Append(">(");

                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(" component").Append(j).Append(j == i ? "" : ", ");
                builder.AppendLine(")");

                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation(2).Append("where T").Append(j).AppendLine(" : IComponent");
                builder.AppendIndentation().AppendLine("{");

                // Unique validation.
                if (i != 1) {
                    UniqueValidation(i, builder);
                    builder.AppendLine();
                }

                // Content.
                builder.AppendIndentation(2).AppendLine("int hashCode =");
                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(3).Append("Archetype.GetComponentHashCode(component").Append(j)
                        .Append(")");

                    if (j != i)
                        builder.AppendLine(" ^");
                    else
                        builder.AppendLine(";");
                }

                builder.AppendIndentation(2).AppendLine("if (!TryGetArchetype(hashCode, out Archetype? archetype)) {");
                builder.AppendIndentation(3).AppendLine(
                    "archetype = CreateArchetype(hashCode, new (Type type, int affectiveHashCode)[] {"
                );
                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(4).Append("(typeof(T").Append(j)
                        .Append("), IAffectiveComponent.GetAffectiveHashCode(component").Append(j).Append("))")
                        .AppendLine(j == i ? "" : ",");
                }
                builder.AppendIndentation(3).AppendLine("});").AppendLine();
                builder.AppendIndentation(2).AppendLine("}").AppendLine();

                builder.AppendLine(@"        (ArchetypeChunk chunk, nint index) = archetype.TakeRecord();
        Entity entity = new Entity(chunk, index);").AppendLine();

                builder.AppendLine(@"        unsafe {
            fixed (byte* ptr = chunk.StorageData) {
                byte* pointer = ptr + index;
");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(4).Append("Unsafe.AsRef<T").Append(j)
                        .Append(">(pointer + archetype.Offsets[typeof(T").Append(j).Append(")]) = component").Append(j)
                        .AppendLine(";");
                }
                builder.AppendLine();

                builder.AppendIndentation(4).AppendLine(
                    "Unsafe.AsRef<EntityInternalComponent>(pointer) = new EntityInternalComponent(entity);"
                );

                builder.AppendLine(@"            }
        }

        archetype.InitializeRecord();
        return entity;
    }
");
            }
        }

        private void UniqueValidation(int i, StringBuilder builder) {
            for (; i >= 2; i--) {
                builder.AppendIndentation(2).Append("if (");
                for (int j = i - 1; j >= 1; j--) {
                    builder.Append("typeof(T").Append(i).Append(") == typeof(T").Append(j).Append(")");
                    if (j != 1)
                        builder.Append(" || ");
                }
                builder.AppendLine(")");
                builder.AppendIndentation(3).Append(
                    "throw new ArgumentException(\"Component type must be unique.\", nameof(component"
                ).Append(i).AppendLine("));");
            }
        }

        private void CreateGetQueryMethods(StringBuilder builder) {
            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.AppendLine(@"    /// <summary>
    /// Returns <see cref=""EntityQuery""/> with given <paramref name=""filter""/>.
    /// </summary>");

                for (int k = 1; k <= i; k++) {
                    builder.AppendIndentation().Append("/// <typeparam name=\"T").Append(k)
                        .AppendLine("\">Type of <see cref=\"IComponent\"/>.</typeparam>");
                }

                builder.Append(@"    /// <param name=""filter""><see cref=""IEntityFilter""/> of returned <see cref=""EntityQuery""/>.</param>
    /// <returns>Returns <see cref=""EntityQuery""/> with given <paramref name=""filter""/>.</returns>
    public EntityQuery<");

                for (int k = 1; k <= i; k++)
                    builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                builder.Append("> GetQuery<");
                for (int k = 1; k <= i; k++)
                    builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                builder.AppendLine(">(IEntityFilter? filter = null)");

                for (int k = 1; k <= i; k++)
                    builder.AppendIndentation(2).Append("where T").Append(k).AppendLine(" : IComponent");
                builder.AppendIndentation(1).AppendLine("{");

                builder.AppendIndentation(2).Append("EntityQuery<");
                for (int k = 1; k <= i; k++)
                    builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                builder.Append("> query = new EntityQuery<");
                for (int k = 1; k <= i; k++)
                    builder.Append('T').Append(k).Append(k == i ? "" : ", ");
                builder.AppendLine(">(this);");

                builder.AppendLine(@"        InitializeQuery(query, filter);
        return query;");

                builder.AppendIndentation(1).AppendLine("}").AppendLine();
            }
        }

    }
}
