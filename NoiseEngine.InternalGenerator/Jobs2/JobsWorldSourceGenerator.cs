using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using NoiseEngine.InternalGenerator.Jobs;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs2 {
    [Generator]
    public class JobsWorldSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated />").AppendLine();
            builder.AppendLine("using System;");
            builder.AppendLine().AppendLine("namespace NoiseEngine.Jobs2;").AppendLine();

            builder.AppendLine("#nullable enable");
            builder.AppendLine("public partial class JobsWorld {").AppendLine();

            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.AppendLine(@"    /// <summary>
    /// Enqueues new <see cref=""Job""/> in this <see cref=""JobsWorld""/>.
    /// </summary>");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <typeparam name=\"T").Append(j)
                        .Append("\">Argument ").Append(j).AppendLine(".</typeparam>");
                }

                builder.AppendLine(@"    /// <param name=""method"">Method to invoke.</param>
    /// <param name=""time"">Time to invoke new <see cref=""Job""/>.</param>");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <param name=\"argument").Append(j).Append("\">Value of T")
                        .Append(j).AppendLine(" argument.</param>");
                }

                builder.AppendIndentation().AppendLine(@"    /// <returns>
    /// New <see cref=""Job""/> in this <see cref=""JobsWorld""/> which invokes <paramref name=""method""/> after given
    /// <paramref name=""time""/>.
    /// </returns>");
                builder.AppendIndentation().Append("public Job Enqueue<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.Append(">(Action<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.Append("> method, long time");
                for (int j = 1; j <= i; j++)
                    builder.Append(", T").Append(j).Append(" argument").Append(j);
                builder.AppendLine(") {");

                builder.AppendIndentation(2).AppendLine("time += CurrentRawTime;");
                builder.AppendIndentation(2).Append("Job<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.Append("> job = new Job<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.Append(">(this, time, method");
                for (int j = 1; j <= i; j++)
                    builder.Append(", argument").Append(j);
                builder.AppendLine(");");

                builder.AppendIndentation(2).AppendLine("InitializeJob(job);");
                builder.AppendIndentation(2).AppendLine("return job;");

                builder.AppendIndentation().AppendLine("}").AppendLine();
            }

            builder.AppendLine("}").AppendLine();

            context.AddSource("EntityWorld.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

    }
}
