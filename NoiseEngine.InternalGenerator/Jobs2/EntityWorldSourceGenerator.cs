using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using NoiseEngine.InternalGenerator.Jobs;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs2 {
    [Generator]
    public class EntityWorldSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated />").AppendLine();
            builder.AppendLine("using System;").AppendLine("using System.Runtime.CompilerServices;");
            builder.AppendLine().AppendLine("namespace NoiseEngine.Jobs2;").AppendLine();

            builder.AppendLine("#nullable enable");
            builder.AppendLine("public partial class EntityWorld {").AppendLine();

            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.AppendLine(@"    /// <summary>
    /// Spawns new <see cref=""Entity""/> with specified components.
    /// </summary>");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <typeparam name=\"T").Append(j)
                        .AppendLine("\">Type of <see cref=\"IComponent\"/>.</typeparam>");
                }

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("/// <param name=\"component").Append(j).Append("\">Value of T")
                        .Append(j).AppendLine(" component.</param>");
                }

                builder.AppendIndentation().AppendLine("/// <returns>New <see cref=\"Entity\"/>.</returns>");
                builder.AppendIndentation().Append("public Entity Spawn<");

                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(j == i ? "" : ", ");
                builder.Append(">(");

                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(" component").Append(j).Append(j == i ? "" : ", ");
                builder.AppendLine(")");

                for (int j = 1; j <= i; j++)
                    builder.AppendIndentation(2).Append("where T").Append(j).AppendLine(" : IComponent");
                builder.AppendIndentation().AppendLine("{");

                builder.AppendIndentation(2).AppendLine("int hashCode =");
                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(3).Append("Archetype.GetComponentHashCode(component").Append(j)
                        .Append(")");

                    if (j != i)
                        builder.AppendLine(" ^");
                    else
                        builder.AppendLine(";");
                }

                builder.AppendIndentation(2).AppendLine("if (!TryGetArchetype(hashCode, out Archetype? archetype)) {");
                builder.AppendIndentation(3).AppendLine(
                    "archetype = CreateArchetype(hashCode, new (Type type, int size, int affectiveHashCode)[] {"
                );
                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(4).Append("(typeof(T").Append(j).Append("), Unsafe.SizeOf<T").Append(j)
                        .Append(">(), IAffectiveComponent.GetAffectiveHashCode(component").Append(j).Append("))")
                        .AppendLine(j == i ? "" : ",");
                }
                builder.AppendIndentation(3).AppendLine("});").AppendLine();
                builder.AppendIndentation(2).AppendLine("}").AppendLine();

                builder.AppendLine(@"        (ArchetypeChunk chunk, nint index) = archetype.TakeRecord();
        Entity entity = new Entity(chunk, index);").AppendLine();

                builder.AppendLine(@"        unsafe {
            fixed (byte* ptr = chunk.StorageData) {
                byte* pointer = ptr + index;
");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation(4).Append("Unsafe.AsRef<T").Append(j)
                        .Append(">(pointer + archetype.Offsets[typeof(T").Append(j).Append(")]) = component").Append(j)
                        .AppendLine(";");
                }
                builder.AppendLine();

                builder.AppendIndentation(4).AppendLine(
                    "Unsafe.AsRef<EntityInternalComponent>(pointer) = new EntityInternalComponent(entity);"
                );

                builder.AppendLine(@"            }
        }

        archetype.InitializeRecord();
        return entity;
    }
");
            }

            builder.AppendLine("}").AppendLine();

            context.AddSource("EntityWorld.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

    }
}
