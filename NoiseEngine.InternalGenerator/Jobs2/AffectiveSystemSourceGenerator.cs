using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs {
    [Generator]
    public class AffectiveSystemSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated />").AppendLine().AppendLine("namespace NoiseEngine.Jobs2;")
                .AppendLine();

            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.Append("public interface IAffectiveSystem<TSelf");
                for (int j = 1; j <= i; j++)
                    builder.Append(", T").Append(j);
                builder.AppendLine("> : IAffectiveSystem");

                builder.AppendIndentation().Append("where TSelf : EntitySystem, IAffectiveSystem<TSelf");
                for (int j = 1; j <= i; j++)
                    builder.Append(", T").Append(j);
                builder.AppendLine(">");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("where T").Append(j).Append(" : IAffectiveComponent<T").Append(j)
                        .AppendLine(">");
                }
                builder.AppendLine("{");

                builder.AppendLine(@"
    /// <summary>
    /// Creates new instance of <see cref=""IAffectiveSystem""/>. This method is used by <see cref=""EntityWorld""/>.
    /// </summary>");

                for (int j = 1; j <= i; j++) {
                    char c = (char)(j + 64);
                    builder.AppendIndentation().Append("/// <param name=\"component").Append(c).AppendLine("\">");
                    builder.AppendIndentation().AppendLine(
                        "/// <see cref=\"IAffectiveComponent\"/> component tracked by this" +
                        "<see cref=\"IAffectiveSystem\"/>."
                    );
                    builder.AppendIndentation().AppendLine("/// </param>");
                }

                builder.AppendIndentation().AppendLine(
                    "/// <returns>New instance of <see cref=\"IAffectiveSystem\"/> with specified cycle time.</returns>"
                ).AppendIndentation().Append("public static abstract (TSelf instance, double cycleTime) Construct(");

                for (int j = 1; j <= i; j++)
                    builder.Append("T").Append(j).Append(" component").Append((char)(j + 64)).Append(", ");
                builder.Remove(builder.Length - 2, 2).AppendLine(");");

                builder.AppendLine().AppendLine("}").AppendLine();
            }

            context.AddSource("IAffectiveSystem.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

    }
}
