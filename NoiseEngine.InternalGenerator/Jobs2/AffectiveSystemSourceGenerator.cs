using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NoiseEngine.Generator;
using System.Text;

namespace NoiseEngine.InternalGenerator.Jobs {
    [Generator]
    public class AffectiveSystemSourceGenerator : ISourceGenerator {

        public void Execute(GeneratorExecutionContext context) {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("// <auto-generated />").AppendLine();
            builder.AppendLine("using System;").AppendLine("using System.Linq;");
            builder.AppendLine().AppendLine("namespace NoiseEngine.Jobs2;").AppendLine();

            for (int i = 1; i <= JobsGeneratorHelper.ArgumentsCount; i++) {
                builder.Append("public abstract class AffectiveSystem<");
                for (int j = 1; j <= i; j++)
                    builder.Append('T').Append(j).Append(", ");
                builder.Remove(builder.Length - 2, 2);
                builder.AppendLine("> : AffectiveSystem");

                for (int j = 1; j <= i; j++) {
                    builder.AppendIndentation().Append("where T").Append(j).Append(" : IAffectiveComponent<T").Append(j)
                        .AppendLine(">");
                }
                builder.AppendLine("{");

                builder.AppendLine();
                builder.AppendIndentation().AppendLine("private protected override Type[] AffectiveComponentsInternal " +
                    "{ get; } = new Type[] {"
                );
                for (int j = 1; j <= i; j++)
                    builder.Append("typeof(T").Append(j).Append("), ");
                builder.Remove(builder.Length - 2, 2);
                builder.AppendLine().AppendIndentation().AppendLine("}.OrderBy(x => x.GetHashCode()).ToArray();");

                builder.AppendLine(@"
    /// <summary>
    /// Creates new instance of <see cref=""EntitySystem""/>. This method is used by <see cref=""EntityWorld""/>.
    /// </summary>");

                for (int j = 1; j <= i; j++) {
                    char c = (char)(j + 64);
                    builder.AppendIndentation().Append("/// <param name=\"component").Append(c).AppendLine("\">");
                    builder.AppendIndentation().AppendLine(
                        "/// <see cref=\"IAffectiveComponent\"/> component tracked by this " +
                        "<see cref=\"AffectiveSystem\"/>."
                    );
                    builder.AppendIndentation().AppendLine("/// </param>");
                }

                builder.AppendIndentation().AppendLine(
                    "/// <returns>New instance of <see cref=\"EntitySystem\"/>.</returns>"
                ).AppendIndentation().Append("protected abstract EntitySystem Create(");

                for (int j = 1; j <= i; j++)
                    builder.Append("T").Append(j).Append(" component").Append((char)(j + 64)).Append(", ");
                builder.Remove(builder.Length - 2, 2).AppendLine(");").AppendLine();

                // CreateFromEntity.
                builder.AppendIndentation().AppendLine(@"private protected override EntitySystem CreateFromComponents(
        System.Collections.Generic.Dictionary<Type, IComponent> components
    ) {"
                );

                builder.AppendIndentation(3).Append("return Create(");
                for (int j = 1; j <= i; j++)
                    builder.Append("(T").Append(j).Append(")components[typeof(T").Append(j).Append(")], ");
                builder.Remove(builder.Length - 2, 2).AppendLine(");");

                builder.AppendIndentation().AppendLine("}").AppendLine();

                builder.AppendLine("}");
            }

            context.AddSource("AffectiveSystem.generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context) {
        }

    }
}
